//uniform vec3 spotpos;
uniform vec3 pointpos;
uniform sampler2D tex;
uniform sampler2D tex2;

varying vec3 position;
varying vec3 normal;
varying float constatt, linatt, quadatt;
varying vec2 texcoords0, texcoords1;
varying vec3 tspos, tppos;
   
vec4 pointLight(in int lightnumber)
{
   vec4 diffuse;
   vec3 norm = normalize(normal);
   vec3 lightVector = tppos - position;
   float dist = length(lightVector);
   float attenuation = 1.0 / (constatt + linatt * dist + quadatt * dist * dist);
   lightVector = normalize(lightVector);
   float nxDir = max(0.0, dot(norm, lightVector));
   diffuse = gl_FrontMaterial.diffuse * gl_LightSource[lightnumber].diffuse * nxDir * attenuation;
   vec4 ambientcolor = (gl_FrontLightModelProduct.sceneColor * gl_FrontMaterial.ambient) + 
                (gl_LightSource[lightnumber].ambient * gl_FrontMaterial.ambient);
   return (diffuse + ambientcolor);
}

vec4 spotLight(in int lightnumber)
{
//varying vec3 position;
//varying vec3 normal;
//varying float constatt, linatt, quadatt;
//varying vec2 texcoords0, texcoords1;

   vec3 norm = normalize(normal);
   vec3 lightVector = vec3(gl_LightSource[lightnumber].position) - position;
   float dist = length(lightVector);
   float attenuation = 1.0 / (constatt + linatt * dist + quadatt * dist * dist);
   lightVector = normalize(lightVector);
   float nxDir = max(0.0, dot(norm, lightVector));
   vec4 diffuse;
   if (nxDir > 0.0) {
   
      float spotEffect = dot(normalize(gl_LightSource[lightnumber].spotDirection), 
            nxDir);
      if (spotEffect > gl_LightSource[lightnumber].spotCosCutoff) {
      
      
      spotEffect = pow(spotEffect, gl_LightSource[lightnumber].spotExponent);
     attenuation *= spotEffect;
         
      
      
      }
   }
   diffuse += attenuation * (diffuse * nxDir);
    vec4 ambientcolor = (gl_FrontLightModelProduct.sceneColor * gl_FrontMaterial.ambient) + 
                (gl_LightSource[lightnumber].ambient * gl_FrontMaterial.ambient);
   return (diffuse + ambientcolor);
}

vec4 modulateTextures()
{
    return(texture2D(tex2, texcoords1) * texture2D(tex, texcoords0));
}

void main()
{
    
    gl_FragColor = /*modulateTextures() * (spotLight(0) + */pointLight(1);
}

