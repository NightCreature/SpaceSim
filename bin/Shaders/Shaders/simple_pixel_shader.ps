//--------------------------------------------------------------------------------------
// Constant Buffer Variables
//--------------------------------------------------------------------------------------
cbuffer MaterialConstants : register(b0)
{
    float4 ambient;
    float4 diffuse;
    float4 specular;
    float4 emissive;
    float shininess;
};

struct LightConstants
{
    float4 m_position;
    float4 m_direction;
    float4 m_diffuse;
    float4 m_specular;
    float4 m_attenuationFallOff;
    float4 m_range;
};

cbuffer LightParamters: register(b1)
{
    //float3 eyePosition;
    LightConstants m_lights[8];
    float3 camera_position;
}

Texture2D<float4> shaderTextures : register(t0);
SamplerState SampleType
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};

Texture2D<float4> normalMap : register(t1);

//--------------------------------------------------------------------------------------
struct PS_INPUT
{
    float4 Pos : SV_POSITION;
    float3 Nor : NORMAL0;
    float3 Tan : TANGENT0;
    float3 BiN : BINORMAL0;
    float2 Tex : TEXCOORD0;
    float3 WorldPos : TEXCOORD1;
};

//--------------------------------------------------------------------------------------
// Pixel Shader
//--------------------------------------------------------------------------------------
float4 ps_main( PS_INPUT input) : SV_Target
{
    float3 vertexPos = input.WorldPos;
    float4 color;

    float4 texColor = float4(1,1,1,1); //shaderTextures.Sample(SampleType, input.Tex);
    float3 sampledNormalMap = ((2.0 * normalMap.Sample(SampleType, input.Tex).xyz) - 1.0);
    float3 nnormal = normalize(input.Tan * sampledNormalMap.x + input.BiN * sampledNormalMap.y + input.Nor * sampledNormalMap.z);

    float3 nviewdirection = normalize(camera_position - vertexPos);
    color = float4(ambient.rgb, 1.0) * texColor + float4(emissive.rgb, 0.0);
    for (int counter = 0; counter < 3; ++counter)
    {
        float3 lightDir = m_lights[counter].m_position.xyz - vertexPos;
        float distance = length(lightDir);
        if (distance <= m_lights[counter].m_range.x )
        {
            m_lights[counter].m_attenuationFallOff.x;
            float attenuation = clamp(0.0, 1.0, 1.0 / (m_lights[counter].m_attenuationFallOff.x + m_lights[counter].m_attenuationFallOff.y * distance + m_lights[counter].m_attenuationFallOff.z * distance * distance));

            lightDir = normalize(lightDir);
            float ndotl = dot(nnormal, -lightDir);
            float3 reflection = normalize(((2.0 * nnormal) * ndotl) - lightDir);
            float rdotv = pow(saturate(dot(reflection, nviewdirection)), shininess);
            if (ndotl > 0.0)
            {
                color = color + (m_lights[counter].m_diffuse * ndotl * (texColor * float4(diffuse.rgb, 1.0))) * attenuation + rdotv * m_lights[counter].m_specular;
            }
        }
    }
    //color.rgb = nnormal;
    //color.a = texColor.a;
    return saturate(color);
}