#define LIGHTING
#include "CommonConstantBuffers.ips"

///--------------------------------------------------------------------------------------
// Constant Buffer Variables
///--------------------------------------------------------------------------------------

Texture2D<float4> shaderTextures : register(t8);
SamplerState SampleType
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};


Texture2D<float4> normalMap : register(t32);
Texture2D<float4> shadowMap : register(t33);
SamplerState ShadowSampleType
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};


///--------------------------------------------------------------------------------------
struct PS_INPUT
{
    float4 Pos : SV_POSITION;
    float3 Nor : NORMAL0;
    float3 Tan : TANGENT0;
    float3 BiN : BINORMAL0;
    float2 Tex : TEXCOORD0;
    float3 WorldPos : TEXCOORD1;
    float4 LightToPixel : TEXCOORD2;
};

float4 doLightCalculation(LightConstants light, float3 lightDir, float3 nnormal, float3 nviewdirection, float distance, float shininess, float4 color, float texColor)
{
    float attenuation = clamp(0.0, 1.0, 1.0 / (light.m_attenuationFallOff.x + light.m_attenuationFallOff.y * distance + light.m_attenuationFallOff.z * distance * distance));

    lightDir = normalize(lightDir);
    float ndotl = dot(nnormal, -lightDir);
    float3 reflection = normalize(((2.0 * nnormal) * ndotl) - lightDir);
    float rdotv = pow(saturate(dot(reflection, nviewdirection)), shininess);
    if (ndotl > 0.0)
    {
        color = color + (light.m_diffuse * ndotl * (texColor * float4(diffuse.rgb, 1.0))) * attenuation + rdotv * light.m_specular;
    }

    return color;
}

///--------------------------------------------------------------------------------------
// Pixel Shader
///--------------------------------------------------------------------------------------
float4 ps_main( PS_INPUT input) : SV_Target
{
    float3 vertexPos = input.WorldPos;
    float4 color;

    float4 texColor =  shaderTextures.Sample(SampleType, input.Tex);
    //texColor = float4(1,1,1,1);
    float3 sampledNormalMap = ((2.0 * normalMap.Sample(SampleType, input.Tex).xyz) - 1.0);
    float3 nnormal = normalize(input.Tan * sampledNormalMap.x + input.BiN * sampledNormalMap.y + input.Nor * sampledNormalMap.z);
    //nnormal = normalize(input.Nor);

    float3 nviewdirection = normalize(camera_position - vertexPos);
    color = float4(ambient.rgb, 1.0) * texColor + float4(emissive.rgb, 0.0);

    for (int counter = 0; counter < 3; ++counter)
    {
        float3 lightDir = m_lights[counter].m_position.xyz - vertexPos;
        float distance = length(lightDir);
        if (distance <= m_lights[counter].m_range.x )
        {
                if (counter == 1)
                {
                    float2 shadowMapTex;
                    shadowMapTex.x =  input.LightToPixel.x / input.LightToPixel.w / 2.0f + 0.5f;
                    shadowMapTex.y = -input.LightToPixel.y / input.LightToPixel.w / 2.0f + 0.5f;
                    float pixelDepth = input.LightToPixel.z - 0.0025;// / input.LightToPixel.w ;///- 0.005;

                    float4 shadow = shadowMap.Sample(ShadowSampleType, shadowMapTex);
                    if (pixelDepth < shadow.r)
                    {
                        color = doLightCalculation(m_lights[counter], lightDir, nnormal, nviewdirection, distance, shininess, color, texColor);
                    }
                }
                else
                {
                    color = doLightCalculation(m_lights[counter], lightDir, nnormal, nviewdirection, distance, shininess, color, texColor);
                }
        }
    }
    //color.rgb = nnormal;
    //color.a = texColor.a;
    //color = float4(input.Tex, 0,1);
    //color = float4(1,1,1,1);
    return saturate(color);
}