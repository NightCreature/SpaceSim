#define LIGHTING
#include "CommonConstantBuffers.ips"
//--------------------------------------------------------------------------------------
// Constant Buffer Variables
//--------------------------------------------------------------------------------------

SamplerState SampleType
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};

Texture2D<float4> shaderTextures : register(t8);
TextureCube<float4> cubeTexture : register(t33);

//--------------------------------------------------------------------------------------
struct PS_INPUT
{
    float4 Pos : SV_POSITION;
    float3 Nor : NORMAL0;
    float2 Tex : TEXCOORD0;
    float3 WorldPos : TEXCOORD1;
};

//--------------------------------------------------------------------------------------
// Pixel Shader
//--------------------------------------------------------------------------------------
float4 ps_main( PS_INPUT input) : SV_Target
{
    float3 vertexPos = input.WorldPos;
    float4 color;
    float4 texColor = shaderTextures.Sample(SampleType, input.Tex);
	
    float3 nnormal = normalize(input.Nor);
    float3 nviewdirection = normalize(camera_position - vertexPos);

    float4 cubeTextureColor = cubeTexture.Sample(SampleType,  refract(nnormal, nviewdirection, 0.99)) *0.75;
    float4 relfectColor = cubeTexture.Sample(SampleType,  reflect(nnormal, nviewdirection));
    color = float4(ambient.rgb, 1.0) * cubeTextureColor + float4(emissive.rgb, 0.0);
    for (int counter = 0; counter < 3; ++counter)
    {        
        float3 lightDir = normalize(m_lights[counter].m_position.xyz - vertexPos);
        float ndotl = dot(nnormal, -lightDir);
        float3 reflection = normalize(((2.0 * nnormal) * ndotl) - lightDir);
        float rdotv = pow(saturate(dot(reflection, nviewdirection)), shininess);
        if (ndotl > 0.0)
        {
            color = color + (m_lights[counter].m_diffuse * ndotl * (cubeTextureColor * float4(diffuse.rgb, 1.0)));// + rdotv;
        }
    }
    
    //color.rgb = nnormal;
    //color.a = texColor.a;
    return saturate(color);
}