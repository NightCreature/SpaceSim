//--------------------------------------------------------------------------------------
// Constant Buffer Variables
//--------------------------------------------------------------------------------------
cbuffer MaterialConstants : register(b0)
{
    float4 ambient;
    float4 diffuse;
    float4 specular;
    float4 emissive;
    float shininess;
};

struct LightConstants
{
    float4 m_position;
    float4 m_direction;
    float4 m_diffuse;
    float4 m_specular;
    float4 m_attenuationFallOff;
    float4 m_range;
};

cbuffer LightParamters: register(b1)
{
    //float3 eyePosition;
    LightConstants m_lights[8];
    float3 camera_position;
}

Texture2D<float4> shaderTextures;
SamplerState SampleType
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};

//--------------------------------------------------------------------------------------
struct PS_INPUT
{
    float4 Pos : SV_POSITION;
    float2 Tex : TEXCOORD0;
};

//--------------------------------------------------------------------------------------
// Pixel Shader
//--------------------------------------------------------------------------------------
float4 ps_main( PS_INPUT input) : SV_Target
{ 
    // retrieve distance from texture
    float mask = shaderTextures.Sample( SampleType, input.Tex);

    float4 color = diffuse; //Pick the diffuse material color for the text
     
    // perform simple thresholding
    if( mask < 0.5 )  
    {
        color.a = 0.0;
    }
    else  
    {
        color.a = 1.0;
    }

    // do some anti-aliasing
    color.a *= smoothstep(0.25, 0.75, mask);

    // final color
    return color;
}